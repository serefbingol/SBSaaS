version: '3.8'

services:
  # ====================
  # POSTGRES (PG17 + TSDB + PostGIS + pgAgent)
  # ====================
  postgres:
    container_name: sbsaas_postgres
    image: sbsaas/postgres:17withtsgisagent
    build:
      context: ./postgres
      dockerfile: postgres.Dockerfile
    env_file:
      - .env
    command: postgres -c shared_preload_libraries='timescaledb'
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - sbsaas_pgdata:/var/lib/postgresql/data
    networks:
      sbsaas-internal-network:
        ipv4_address: ${POSTGRES_IP}


  # ============
  # RABBITMQ
  # ============
  rabbitmq:
    container_name: sbsaas_rabbitmq
    image: rabbitmq:4.0-management
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 15s
    ports:
      - "${RABBITMQ_PORT}:5672"        # AMQP
      - "${RABBITMQ_MGMT_PORT}:15672"  # Management UI
    volumes:
      - sbsaas_rabbitmq_data:/var/lib/rabbitmq
    networks:
      sbsaas-internal-network:
        ipv4_address: ${RABBITMQ_IP}

  # ============
  # CLAMAV
  # ============
  clamav:
    container_name: sbsaas_clamav
    image: clamav/clamav:latest
    env_file:
      - .env
    healthcheck:
      # Healthcheck, 'clamd' servisinin ayakta ve cevap verir durumda olup olmadığını kontrol edecek şekilde güncellendi.
      # Servisin ilk defa çalıştırıldığında virüs veritabanını indirmesi uzun sürebilir.
      # Bu nedenle start_period, ilk indirme işlemine zaman tanımak için artırıldı.
      test: ["CMD", "clamdscan", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 350s
    ports:
      - "${CLAMAV_PORT}:3310"
    volumes:
      - sbsaas_clamav_db:/var/lib/clamav
    networks:
      sbsaas-internal-network:
        ipv4_address: ${CLAMAV_IP}
      sbsaas-public-network:
        ipv4_address: ${CLAMAV_PUBLIC_IP}

  # =======================
  # MINIO (4-NODE CLUSTER)
  # =======================
  minio1:
    container_name: sbsaas_minio1
    image: minio/minio:latest
    command: server http://${MINIO1_IP}:9000/data http://${MINIO2_IP}:9000/data http://${MINIO3_IP}:9000/data http://${MINIO4_IP}:9000/data --console-address ":9001"
    env_file:
      - .env
    volumes:
      - sbsaas_minio1_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 60s
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      sbsaas-internal-network:
        ipv4_address: ${MINIO1_IP}

  minio2:
    container_name: sbsaas_minio2
    image: minio/minio:latest
    command: server http://${MINIO1_IP}:9000/data http://${MINIO2_IP}:9000/data http://${MINIO3_IP}:9000/data http://${MINIO4_IP}:9000/data --console-address ":9001"
    env_file:
      - .env
    volumes:
      - sbsaas_minio2_data:/data
    networks:
      sbsaas-internal-network:
        ipv4_address: ${MINIO2_IP}

  minio3:
    container_name: sbsaas_minio3
    image: minio/minio:latest
    command: server http://${MINIO1_IP}:9000/data http://${MINIO2_IP}:9000/data http://${MINIO3_IP}:9000/data http://${MINIO4_IP}:9000/data --console-address ":9001"
    env_file:
      - .env
    volumes:
      - sbsaas_minio3_data:/data
    networks:
      sbsaas-internal-network:
        ipv4_address: ${MINIO3_IP}

  minio4:
    container_name: sbsaas_minio4
    image: minio/minio:latest
    command: server http://${MINIO1_IP}:9000/data http://${MINIO2_IP}:9000/data http://${MINIO3_IP}:9000/data http://${MINIO4_IP}:9000/data --console-address ":9001"
    env_file:
      - .env
    volumes:
      - sbsaas_minio4_data:/data
    networks:
      sbsaas-internal-network:
        ipv4_address: ${MINIO4_IP}

  # MINIO INIT (bucket + policy + RabbitMQ notify)
  minio-init:
    container_name: sbsaas_minio_init
    build:
      context: ./minio-init
      dockerfile: minio-init.Dockerfile
    depends_on:
      minio1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    # Script'in başlangıç anındaki olası zamanlama sorunlarına karşı (örn: minio tam hazır değilken)
    # başarısız olması durumunda yeniden denemesini sağlamak için bu kuralı ekliyoruz.
    restart: on-failure
    entrypoint: ["/bin/sh", "/init/minio-init.sh"]
    env_file:
      - .env
    volumes:
      - ./minio/minio-init.sh:/init/minio-init.sh:ro
    networks:
      sbsaas-internal-network:
        ipv4_address: ${MINIO_INIT_IP}

  # ============
  # API
  # ============
  api:
    container_name: sbsaas_api
    build:
      context: ..
      dockerfile: docker/api/api.Dockerfile
    env_file:
      - .env
    environment:
      # .NET Configuration'ın okuyabilmesi için ConnectionStrings:Postgres anahtarını oluşturuyoruz.
      # Docker Compose, servis adlarını DNS olarak çözümlediği için host olarak 'postgres' kullanıyoruz.
      - ConnectionStrings__Postgres=Host=${POSTGRES_IP};Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - Minio__Endpoint=${MINIO_ENDPOINT}
      - Minio__Bucket=${MINIO_BUCKET}
    depends_on:
      - postgres
      - rabbitmq
      - minio1
    healthcheck:
      # Healthcheck, konteynerin İÇİNDEKİ porta (8080) istek atmalıdır.
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8080/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    ports:
      - "${API_HTTP_PORT}:8080"
    networks:
      sbsaas-internal-network:
        ipv4_address: ${API_IP}
      sbsaas-public-network:
        ipv4_address: ${API_PUBLIC_IP}

  # ============
  # WORKER
  # ============
  worker:
    container_name: sbsaas_worker
    build:
      context: ..
      dockerfile: docker/worker/worker.Dockerfile
    env_file:
      - .env
    environment:
      # .NET Configuration'ın okuyabilmesi için ConnectionStrings:Postgres anahtarını oluşturuyoruz.
      - ConnectionStrings__Postgres=Host=${POSTGRES_IP};Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      # FileScanConsumerWorker'ın RabbitMQ'ya bağlanabilmesi için gerekli ortam değişkenleri.
      # .NET, çift alt çizgi'yi (__) hiyerarşik yapılandırmada iki noktaya (:) dönüştürür (RabbitMQ:Host).
      - RabbitMQ__Host=${RABBITMQ_IP}
      - RabbitMQ__User=${RABBITMQ_USER}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD}
      - RabbitMQ__Port=${RABBITMQ_PORT}
      - RabbitMQ__Exchange=${RABBITMQ_EXCHANGE}
      # Worker'ın ClamAV servisine bağlanabilmesi için gerekli ortam değişkenleri.
      - ClamAV__Host=clamav
      - ClamAV__Port=3310
    depends_on:
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "ps -ef | grep SBSaaS.Worker.dll | grep -v grep || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      sbsaas-internal-network:
        ipv4_address: ${WORKER_IP}

# ======================
# VOLUMES
# ======================
volumes:
  sbsaas_pgdata:
  sbsaas_rabbitmq_data:
  sbsaas_minio1_data:
  sbsaas_minio2_data:
  sbsaas_minio3_data:
  sbsaas_minio4_data:
  sbsaas_clamav_db:

# ======================
# NETWORKS
# ======================
networks:
  sbsaas-internal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24
  sbsaas-public-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.29.0.0/24
