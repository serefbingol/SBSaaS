openapi: 3.1.0
info:
  title: SBSaaS API
  version: 1.0.0
  description: |
    Multi-tenant SaaS API. All requests must include `X-Tenant-Id` unless specified.
servers:
  - url: https://api.sbsass.local/api/v1
    description: Local/Dev
  - url: https://api.sbsass.example.com/api/v1
    description: Production

paths:
  /auth/login:
    post:
      summary: Login with username/password
      operationId: login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AuthTokens' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshToken
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshTokenRequest' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AuthTokens' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
  /auth/logout:
    post:
      summary: Logout and invalidate refresh token
      operationId: logout
      tags: [Auth]
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: No Content }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /me:
    get:
      summary: Returns current user profile
      operationId: getMyProfile
      tags: [Auth]
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantHeader' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/UserProfile' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /tenants:
    get:
      summary: List tenants (admin)
      operationId: listTenants
      tags: [Tenants]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedTenantList' }
    post:
      summary: Create tenant
      operationId: createTenant
      tags: [Tenants]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TenantCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Tenant' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }


  /tenants/{id}:
    get:
      summary: Get tenant by id
      operationId: getTenantById
      tags: [Tenants]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Tenant' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Update tenant
      operationId: updateTenant
      tags: [Tenants]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/TenantUpdate' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Tenant' } } } }
    delete:
      summary: Delete tenant
      operationId: deleteTenant
      tags: [Tenants]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }

  # ---------------- USERS ----------------
  /users:
    get:
      summary: List users in tenant
      operationId: listUsers
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedUserList' }
              examples:
                success:
                  summary: A successful response with one user
                  value:
                    items:
                      - id: "11111111-1111-1111-1111-111111111111"
                        email: "admin@example.com"
                        displayName: "Admin User"
                        tenantId: "22222222-2222-2222-2222-222222222222"
                        roles: ["Admin", "User"]
                        createdUtc: "2025-01-01T10:00:00Z"
                    page: 1
                    pageSize: 20
                    total: 1
    post:
      summary: Create user in tenant
      operationId: createUser
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/UserCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/TooManyRequests' }

  /users/{id}:
    get:
      summary: Get user by id
      operationId: getUserById
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Update user
      operationId: updateUser
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/UserUpdate' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Delete user
      operationId: deleteUser
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
        '404': { $ref: '#/components/responses/NotFound' }

  /users/{id}/roles:
    put:
      summary: Replace user roles
      operationId: setUserRoles
      tags: [Users]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/RoleAssignment' } } }
      responses:
        '204': { description: No Content }

  # -------------- SUBSCRIPTIONS & PLANS --------------
  /plans:
    get:
      summary: List subscription plans
      operationId: listPlans
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedPlanList' } } } }
    post:
      summary: Create subscription plan
      operationId: createPlan
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionPlanCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionPlan' } } } }

  /plans/{id}:
    get:
      summary: Get plan by id
      operationId: getPlanById
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionPlan' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Update plan
      operationId: updatePlan
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionPlanUpdate' } } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionPlan' } } } }
    delete:
      summary: Delete plan
      operationId: deletePlan
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }

  /subscriptions:
    get:
      summary: List subscriptions for tenant
      operationId: listSubscriptions
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedSubscriptionList' } } } }
    post:
      summary: Create subscription for tenant
      operationId: createSubscription
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/TenantHeader' } ]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/SubscriptionCreate' } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Subscription' } } } }

  /subscriptions/{id}:
    get:
      summary: Get subscription by id
      operationId: getSubscriptionById
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Subscription' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      summary: Cancel subscription
      operationId: cancelSubscription
      tags: [Subscriptions]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }

  # -------------- FILES --------------
  /files/upload:
    post:
      summary: Upload a file
      operationId: uploadFile
      tags: [Files]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties: { file: { type: string, format: binary } }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/FileObject' } } } }

  /files/{objectName}:
    delete:
      summary: Delete a file
      operationId: deleteFile
      tags: [Files]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - name: objectName
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  # -------------- AUDIT --------------
  /audit/change-log:
    get:
      summary: Query audit logs
      operationId: queryAuditLogs
      tags: [Audit]
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: table
          schema: { type: string }
        - in: query
          name: operation
          schema: { type: string, enum: [INSERT, UPDATE, DELETE] }
        - in: query
          name: userId
          schema: { type: string }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagedAuditList' } } } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    TenantHeader:
      in: header
      name: X-Tenant-Id
      required: true
      description: Tenant identifier (UUID)
      schema: { type: string, format: uuid }
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    PageSize:
      in: query
      name: pageSize
      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
    Query:
      in: query
      name: q
      schema: { type: string }
    Sort:
      in: query
      name: sort
      description: Comma-separated fields, prefix with '-' for desc. e.g. `-createdUtc,email`
      schema: { type: string }
  responses:
    Unauthorized:
      description: Unauthorized
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ProblemDetails' }
          examples:
            userNotFound:
              summary: Example for a user not found
              value:
                type: "https://tools.ietf.org/html/rfc7231#section-6.5.4"
                title: "Not Found"
                status: 404
                detail: "User with id '...' not found."
                traceId: "0H..."
    BadRequest:
      description: Bad Request (e.g. validation error)
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
    Forbidden:
      description: Forbidden (e.g. insufficient permissions)
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
    Conflict:
      description: Conflict (e.g. unique constraint violation)
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
    UnprocessableEntity:
      description: Unprocessable Entity (e.g. business rule violation)
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
    TooManyRequests:
      description: Too Many Requests (rate limit exceeded)
      headers:
        Retry-After:
          schema: { type: integer, description: "The number of seconds to wait before making a new request." }
        X-RateLimit-Limit:
          schema: { type: integer, description: "The number of allowed requests in the current period." }
        X-RateLimit-Remaining:
          schema: { type: integer, description: "The number of remaining requests in the current period." }
        X-RateLimit-Reset:
          schema: { type: integer, description: "The number of seconds until the limit resets." }
      content: { application/json: { schema: { $ref: '#/components/schemas/ProblemDetails' } } }
  schemas:
    ProblemDetails:
      type: object
      properties:
        type: { type: string }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        traceId: { type: string }

    # -------- USERS --------
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        displayName: { type: string }
        tenantId: { type: string, format: uuid }
        roles:
          type: array
          items: { type: string }
        createdUtc: { type: string, format: date-time }
    UserCreate:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
        displayName: { type: string }
    UserUpdate:
      type: object
      properties:
        displayName: { type: string }
        password: { type: string, format: password }
    RoleAssignment:
      type: object
      properties:
        roles:
          type: array
          items: { type: string }
    PagedUserList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/User' }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    # -------- TENANTS --------
    Tenant:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        culture: { type: string, example: tr-TR, description: "Veri formatlama için kültür (tarih, sayı vb.)." }
        uiCulture: { type: string, example: tr-TR, description: "UI dili ve kaynak dosyaları için kültür." }
        timeZone: { type: string, example: Europe/Istanbul }
    TenantCreate:
      type: object
      required: [name]
      properties:
        name: { type: string }
        culture: { type: string }
        timeZone: { type: string }
    TenantUpdate:
      type: object
      properties:
        name: { type: string }
        timeZone: { type: string }
    PagedTenantList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Tenant' }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    # -------- SUBSCRIPTIONS --------
    SubscriptionPlan:
      type: object
      properties:
        id: { type: string, format: uuid }
        code: { type: string, example: PRO }
        name: { type: string }
        price: { type: number, format: decimal }
        currency: { type: string, example: TRY }
        isActive: { type: boolean }
    SubscriptionPlanCreate:
      type: object
      required: [code, name, price]
      properties:
        code: { type: string }
        name: { type: string }
        price: { type: number, format: decimal }
        currency: { type: string, default: TRY }
        isActive: { type: boolean, default: true }
    SubscriptionPlanUpdate:
      type: object
      properties:
        name: { type: string }
        price: { type: number, format: decimal }
        currency: { type: string }
        isActive: { type: boolean }

    PagedPlanList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/SubscriptionPlan' }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    Subscription:
      type: object
      properties:
        id: { type: string, format: uuid }
        tenantId: { type: string, format: uuid }
        planId: { type: string, format: uuid }
        startUtc: { type: string, format: date-time }
        endUtc: { type: string, format: date-time, nullable: true }
        autoRenew: { type: boolean }
    SubscriptionCreate:
      type: object
      required: [planId]
      properties:
        planId: { type: string, format: uuid }
        autoRenew: { type: boolean, default: true }
    PagedSubscriptionList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Subscription' }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    # -------- FILES --------
    FileObject:
      type: object
      properties:
        objectName: { type: string }
        bucket: { type: string }

    # -------- AUDIT --------
    AuditLog:
      type: object
      properties:
        id: { type: integer, format: int64 }
        tenantId: { type: string, format: uuid }
        tableName: { type: string }
        keyValues: { type: string, description: "JSON representation of the primary key(s)" }
        oldValues: { type: string, description: "JSON representation of the old values", nullable: true }
        newValues: { type: string, description: "JSON representation of the new values", nullable: true }
        operation: { type: string, enum: [INSERT, UPDATE, DELETE] }
        userId: { type: string, nullable: true }
        utcDate: { type: string, format: date-time }
    PagedAuditList:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/AuditLog' }
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    # -------- AUTH --------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    AuthTokens:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        expiresIn: { type: integer }
    UserProfile:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string }
        displayName: { type: string }
        roles: { type: array, items: { type: string } }
        tenantId: { type: string, format: uuid }
    InviteRequest:
      type: object
      required: [tenantId, email, role]
      properties:
        tenantId: { type: string, format: uuid }
        email: { type: string, format: email }
        role: { type: string }
    InviteResponse:
      type: object
      properties:
        token: { type: string }
    AcceptInviteRequest:
      type: object
      required: [token, password]
      properties:
        token: { type: string }
        password: { type: string, format: password }